{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAMC,SAASC,cAAc,yBAC7BC,EAAaF,SAASC,cAAc,uBACpCE,EAAOH,SAASC,cAAc,sBAC9BG,EAASJ,SAASC,cAAc,wBA4BtC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,uBAAqBN,QAAiBC,OAE5CM,EAAK,sBAAoBP,QAAeC,MAAU,G,CAjC1DR,EAAIe,iBAAiB,SAASC,IAC5BA,EAAIC,iBAEJ,IAAK,IAAIC,EAAI,EAAGA,EAAIb,EAAOc,MAAOD,GAAK,EACrCZ,EAAcY,EAAGd,EAAKe,OACnBC,MAAK,EAACb,SAAEA,EAAWW,EAACV,MAAEA,EAAQJ,EAAKe,UAClCE,YAAW,KACTvB,EAAAwB,OAAOC,QACL,uBAAqBhB,EAAY,QAASiB,OACtCrB,EAAKgB,OAAiBX,EAAQD,MAC/B,GAEJiB,OAAOrB,EAAWgB,OAASX,EAAQD,EAAS,IAEhDkB,OAAM,EAAClB,SAAEA,EAAWW,EAACV,MAAEA,EAAQJ,EAAKe,UACnCE,YAAW,KACTvB,EAAAwB,OAAOI,QACL,sBAAoBnB,EAAY,QAASiB,OACrCrB,EAAKgB,OAAiBX,EAAQD,MAC/B,GAEJiB,OAAOrB,EAAWgB,OAASX,EAAQD,EAAS,GAC/C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst btn = document.querySelector('button[type=\"submit\"]');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\nbtn.addEventListener('click', evt => {\n  evt.preventDefault();\n\n  for (let i = 0; i < amount.value; i += 1) {\n    createPromise(i, step.value)\n      .then(({ position = i, delay = step.value }) => {\n        setTimeout(() => {\n          Notify.success(\n            `✅ Fulfilled promise ${position + 1} in ${\n              Number(delayInput.value) + delay * position\n            }ms`\n          );\n        }, Number(delayInput.value) + delay * position);\n      })\n      .catch(({ position = i, delay = step.value }) => {\n        setTimeout(() => {\n          Notify.failure(\n            `❌ Rejected promise ${position + 1} in ${\n              Number(delayInput.value) + delay * position\n            }ms`\n          );\n        }, Number(delayInput.value) + delay * position);\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$btn","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","addEventListener","evt","preventDefault","i","value","then","setTimeout","Notify","success","Number","catch","failure"],"version":3,"file":"03-promises.6d754582.js.map"}