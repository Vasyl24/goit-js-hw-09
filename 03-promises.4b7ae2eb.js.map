{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAMC,SAASC,cAAc,yBAC7BC,EAAaF,SAASC,cAAc,uBACpCE,EAAOH,SAASC,cAAc,sBAC9BG,EAASJ,SAASC,cAAc,wBAEtCF,EAAIM,iBAAiB,SAAS,SAAAC,G,kBA0B9B,IAAuBC,EAAUC,EACzBC,GADeF,EAtBLG,EAsBeF,EAtBZL,EAAKQ,MAuBlBF,EAAgBG,KAAKC,SAAW,GAE/B,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLR,EACFM,EAAQ,CAAER,WAAUC,UAEpBQ,EAAO,CAAET,WAAUC,S,GAEpBN,EAAWS,M,KA/BXO,MAAK,SAAAC,G,QAAGZ,gBAAQ,IAAAa,EAAGV,EAACU,EAAAC,EAAAF,EAAEX,aAAK,IAAAa,EAAGlB,EAAKQ,MAAKU,EACvCJ,YAAW,WACTpB,EAAAyB,OAAOC,QACL,uBACIC,OADqBjB,EAAS,QAEjCiB,OADCC,OAAOvB,EAAWS,OAASH,EAAQD,EACpC,M,GAEFkB,OAAOvB,EAAWS,OAASH,EAAQD,E,IAEvCmB,OAAM,SAAAP,G,QAAGZ,gBAAQ,IAAAa,EAAGV,EAACU,EAAAC,EAAAF,EAAEX,aAAK,IAAAa,EAAGlB,EAAKQ,MAAKU,EACxCJ,YAAW,WACTpB,EAAAyB,OAAOK,QACL,sBACEH,OADoBjB,EAAS,QAE9BiB,OADCC,OAAOvB,EAAWS,OAASH,EAAQD,EACpC,M,GAEFkB,OAAOvB,EAAWS,OAASH,EAAQD,E,KApB5CD,EAAIsB,iBAEJ,IAAK,IAAIC,EAAI,EAAGA,GAAKzB,EAAOO,MAAOkB,GAAK,EAACC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst btn = document.querySelector('button[type=\"submit\"]');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\nbtn.addEventListener('click', evt => {\n  evt.preventDefault();\n\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, step.value)\n      .then(({ position = i, delay = step.value }) => {\n        setTimeout(() => {\n          Notify.success(\n            `✅ Fulfilled promise ${position} in ${\n              Number(delayInput.value) + delay * position\n            }ms`\n          );\n        }, Number(delayInput.value) + delay * position);\n      })\n      .catch(({ position = i, delay = step.value }) => {\n        setTimeout(() => {\n          Notify.failure(\n            `❌ Rejected promise ${position} in ${\n              Number(delayInput.value) + delay * position\n            }ms`\n          );\n        }, Number(delayInput.value) + delay * position);\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delayInput.value);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$btn","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","addEventListener","evt","position","delay","shouldResolve","i","value","Math","random","Promise","resolve","reject","setTimeout","then","param","_position","_delay","Notify","success","concat","Number","catch","failure","preventDefault","i1","_loop"],"version":3,"file":"03-promises.4b7ae2eb.js.map"}