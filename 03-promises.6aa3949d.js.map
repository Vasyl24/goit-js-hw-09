{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAMC,SAASC,cAAc,yBAC7BC,EAAaF,SAASC,cAAc,uBACpCE,EAAOH,SAASC,cAAc,sBAC9BG,EAASJ,SAASC,cAAc,wBAEtCF,EAAIM,iBAAiB,SAAS,SAAAC,G,kBA0B9B,IAAuBC,EAAUC,EACzBC,GADeF,EAtBLG,EAsBeF,EAtBZL,EAAKQ,MAuBlBF,EAAgBG,KAAKC,SAAW,GAE/B,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLR,EACFM,EAAQ,uBAAwCG,OAAfX,EAAS,QAAYW,OAANV,EAAM,OAEpDQ,EAAK,sBAAqCE,OAAfX,EAAS,QAAYW,OAANV,EAAM,M,GAEnDN,EAAWS,M,KA/BXQ,MAAK,SAAAC,G,QAAGb,gBAAQ,IAAAc,EAAGX,EAACW,EAAAC,EAAAF,EAAEZ,aAAK,IAAAc,EAAGnB,EAAKQ,MAAKW,EACvCL,YAAW,WACTpB,EAAA0B,OAAOC,QACL,uBACIN,OADqBX,EAAS,QAEjCW,OADCO,OAAOvB,EAAWS,OAASH,EAAQD,EACpC,M,GAEFkB,OAAOvB,EAAWS,OAASH,EAAQD,E,IAEvCmB,OAAM,SAAAN,G,QAAGb,gBAAQ,IAAAc,EAAGX,EAACW,EAAAC,EAAAF,EAAEZ,aAAK,IAAAc,EAAGnB,EAAKQ,MAAKW,EACxCL,YAAW,WACTpB,EAAA0B,OAAOI,QACL,sBACIT,OADoBX,EAAS,QAEhCW,OADCO,OAAOvB,EAAWS,OAASH,EAAQD,EACpC,M,GAEFkB,OAAOvB,EAAWS,OAASH,EAAQD,E,KApB5CD,EAAIsB,iBAEJ,IAAK,IAAIC,EAAI,EAAGA,GAAKzB,EAAOO,MAAOkB,GAAK,EAACC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst btn = document.querySelector('button[type=\"submit\"]');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\nbtn.addEventListener('click', evt => {\n  evt.preventDefault();\n\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, step.value)\n      .then(({ position = i, delay = step.value }) => {\n        setTimeout(() => {\n          Notify.success(\n            `✅ Fulfilled promise ${position} in ${\n              Number(delayInput.value) + delay * position\n            }ms`\n          );\n        }, Number(delayInput.value) + delay * position);\n      })\n      .catch(({ position = i, delay = step.value }) => {\n        setTimeout(() => {\n          Notify.failure(\n            `❌ Rejected promise ${position} in ${\n              Number(delayInput.value) + delay * position\n            }ms`\n          );\n        }, Number(delayInput.value) + delay * position);\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delayInput.value);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$btn","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","addEventListener","evt","position","delay","shouldResolve","i","value","Math","random","Promise","resolve","reject","setTimeout","concat","then","param","_position","_delay","Notify","success","Number","catch","failure","preventDefault","i1","_loop"],"version":3,"file":"03-promises.6aa3949d.js.map"}